(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[77,35],{

/***/ 156:
/***/ (function(module, exports) {

// Module
var code = " <div class=\"content\"><div class=\"markdown\"><h1 id=\"pluginmanager%E5%AF%B9%E8%B1%A1\"><a class=\"header-anchor\" href=\"#pluginmanager%E5%AF%B9%E8%B1%A1\">#</a> PluginManager对象</h1> <p>PluginManager是整个cli ui插件系统的基础，该对象的方法按照功能可分为四类。</p> <blockquote> <p>上文提到，在cli ui加载依赖时，会尝试读取依赖包内的ui.js文件，并将PluginManager对象的实例api注入其中，因此以下插件的使用均基于api来调用。</p> </blockquote> <h2 id=\"1.-%E6%8F%92%E4%BB%B6%E5%AE%9A%E4%B9%89%E7%B1%BB\"><a class=\"header-anchor\" href=\"#1.-%E6%8F%92%E4%BB%B6%E5%AE%9A%E4%B9%89%E7%B1%BB\">#</a> 1. 插件定义类</h2> <p>此类模块主要包含cli ui中涉及到的各种类型插件的注册，集中管理各种插件。包括：addon插件、widget插件、配置插件、任务插件、自定义视图插件、路由插件。</p> <h3 id=\"addon%E6%8F%92%E4%BB%B6\"><a class=\"header-anchor\" href=\"#addon%E6%8F%92%E4%BB%B6\">#</a> addon插件</h3> <p>addon插件是一个动态加载到cli ui中的JS包，用于加载各类自定义组件和路由。通过<code>registerAddon</code>函数，开发者可以为自定义的插件指定id及加载路径（在npm包内的ui.js中），cli ui在插件加载时，会尝试从开发者指定的路径下加载插件定义，从而集成到cli ui对应位置，api使用方式如下：</p> <pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SAN_CLI_UI_DEV</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 在开发模式下加载自定义端口文件</span>\n        api<span class=\"token punctuation\">.</span><span class=\"token function\">registerAddon</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            id<span class=\"token operator\">:</span> <span class=\"token string\">'san.widgets.client-addon.dev'</span><span class=\"token punctuation\">,</span>\n            url<span class=\"token operator\">:</span> <span class=\"token string\">'http://localhost:8889/index.js'</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        api<span class=\"token punctuation\">.</span><span class=\"token function\">registerAddon</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// 在生产模式下加载npm包的路径</span>\n            id<span class=\"token operator\">:</span> <span class=\"token string\">'san.widgets.client-addon'</span><span class=\"token punctuation\">,</span>\n            path<span class=\"token operator\">:</span> <span class=\"token string\">'san-cli-ui-addon-widgets/dist'</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre> <h4 id=\"api-%E8%AF%B4%E6%98%8E\"><a class=\"header-anchor\" href=\"#api-%E8%AF%B4%E6%98%8E\">#</a> API 说明</h4> <p><strong>registerAddon</strong></p> <table> <thead> <tr> <th>参数</th> <th>说明</th> <th>类型</th> <th>默认值</th> </tr> </thead> <tbody> <tr> <td>id</td> <td>插件唯一id</td> <td>string</td> <td>无</td> </tr> <tr> <td>url</td> <td>可选，开发模式下加载的url</td> <td>string</td> <td>无</td> </tr> <tr> <td>path</td> <td>npm包的路径</td> <td>string</td> <td>无</td> </tr> </tbody> </table> <p><code>registerAddon</code>是每个插件包的基础方法，此方法定义的插件被cli ui成功加载后，即可将以下方法定义的组件或配置应用的cli ui对应位置。</p> <h3 id=\"widget%E6%8F%92%E4%BB%B6\"><a class=\"header-anchor\" href=\"#widget%E6%8F%92%E4%BB%B6\">#</a> widget插件</h3> <p>widget（部件）插件，指显示在「项目仪表盘」内的小部件，cli ui默认部件有：欢迎提示、运行任务、终止端口、新闻订阅。通过<code>api.registerWidget</code>方法，开发者可实现自定义的部件，显示在仪表盘内。使用方式如下：</p> <pre class=\"language-js\"><code class=\"language-js\">api<span class=\"token punctuation\">.</span><span class=\"token function\">registerWidget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'san.widgets.test'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 必选，唯一的 ID</span>\n    title<span class=\"token operator\">:</span> <span class=\"token string\">'title'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 必选，组件的名称</span>\n    description<span class=\"token operator\">:</span> <span class=\"token string\">'description'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 必选，组件的描述</span>\n    icon<span class=\"token operator\">:</span> <span class=\"token string\">'info-circle'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 必选，组件的icon，取值可选santd内的icon类型</span>\n    component<span class=\"token operator\">:</span> <span class=\"token string\">'san.widgets.components.test-widget'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 必选，加载的动态组件，会用 ClientAddonApi 进行注册</span>\n    minWidth<span class=\"token operator\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 宽度</span>\n    minHeight<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 高度</span>\n    maxWidth<span class=\"token operator\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\n    maxHeight<span class=\"token operator\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\n    defaultWidth<span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 必选</span>\n    defaultHeight<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 必选</span>\n    openDetailsButton<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 可选</span>\n    <span class=\"token function-variable function\">defaultConfig</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>  <span class=\"token comment\">// 可选，如果有prompt表单，返回默认配置</span>\n        hi<span class=\"token operator\">:</span> <span class=\"token string\">'hello'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">async</span> <span class=\"token function\">onConfigOpen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\">// 可选，返回表单配置</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            prompts<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token punctuation\">{</span>\n                    name<span class=\"token operator\">:</span> <span class=\"token string\">'hi'</span><span class=\"token punctuation\">,</span>\n                    type<span class=\"token operator\">:</span> <span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span>\n                    message<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token function-variable function\">validate</span><span class=\"token operator\">:</span> <span class=\"token parameter\">input</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>input\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre> <h4 id=\"api-%E8%AF%B4%E6%98%8E-2\"><a class=\"header-anchor\" href=\"#api-%E8%AF%B4%E6%98%8E-2\">#</a> API 说明</h4> <p><strong>registerWidget</strong></p> <table> <thead> <tr> <th>参数</th> <th>说明</th> <th>类型</th> <th>默认值</th> </tr> </thead> <tbody> <tr> <td>id</td> <td>必选，部件唯一的 ID</td> <td>string</td> <td>无</td> </tr> <tr> <td>title</td> <td>必选，部件的名称</td> <td>string</td> <td>无</td> </tr> <tr> <td>description</td> <td>必选，部件的描述</td> <td>string</td> <td>无</td> </tr> <tr> <td>icon</td> <td>必选，组件的icon，取值可选santd内的icon类型</td> <td>string</td> <td>无</td> </tr> <tr> <td>component</td> <td>必选，加载的动态组件id，会用 ClientAddonApi 进行注册</td> <td>string</td> <td>无</td> </tr> <tr> <td>defaultHeight</td> <td>组件的默认高度（与最大最小高度可以选填）</td> <td>number</td> <td>无</td> </tr> <tr> <td>defaultWidth</td> <td>组件的默认宽度（与最大最小宽度可以选填）</td> <td>number</td> <td>无</td> </tr> <tr> <td>minHeight</td> <td>组件的最小高度</td> <td>number</td> <td>无</td> </tr> <tr> <td>minWidth</td> <td>组件的最小宽度</td> <td>number</td> <td>无</td> </tr> <tr> <td>maxHeight</td> <td>组件的最大高度</td> <td>number</td> <td>无</td> </tr> <tr> <td>maxWidth</td> <td>组件的最大宽度</td> <td>number</td> <td>无</td> </tr> <tr> <td>openDetailsButton</td> <td>是否显示部件右上角展示详情按钮，默认不显示</td> <td>boolean</td> <td>false</td> </tr> <tr> <td>needsUserConfig</td> <td>是否显示部件右上角配置按钮，默认不显示</td> <td>boolean</td> <td>false</td> </tr> <tr> <td>onConfigOpen</td> <td>当点击右上角配置按钮时，返回此函数配置的表单格式</td> <td>function({context})</td> <td>无</td> </tr> <tr> <td>defaultConfig</td> <td>onConfigOpen配置的表单的默认值</td> <td>function()</td> <td>无</td> </tr> <tr> <td>onAdded</td> <td>将部件从列表添加到仪表盘页面时触发此函数</td> <td>function({widget, definition})</td> <td>无</td> </tr> <tr> <td>onRemoved</td> <td>将部件从仪表盘页面移除时触发此函数</td> <td>function({widget, definition})</td> <td>无</td> </tr> </tbody> </table> <h3 id=\"%E9%85%8D%E7%BD%AE%E6%8F%92%E4%BB%B6\"><a class=\"header-anchor\" href=\"#%E9%85%8D%E7%BD%AE%E6%8F%92%E4%BB%B6\">#</a> 配置插件</h3> <p>配置插件主要用于在项目配置tab中，增加用户自定义的配置项，将项目中配置文件修改变为可视化操作。目前san cli创建的工程，默认配置项包含san.config.js和eslint的配置。通过调用<code>api.registerConfig</code>可以更改项目的配置，此函数返回一个符合inquirer.prompts格式的对象，通过该对象生成表单，可在项目配置中显示并修改具体项目的配置。使用方式如下：</p> <pre class=\"language-js\"><code class=\"language-js\">\t<span class=\"token comment\">// san.config.js的配置</span>\n    api<span class=\"token punctuation\">.</span><span class=\"token function\">registerConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        id<span class=\"token operator\">:</span> <span class=\"token string\">'san.san-cli'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 配置项的id</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'San CLI'</span><span class=\"token punctuation\">,</span>\n        description<span class=\"token operator\">:</span> <span class=\"token string\">'configuration.san-cli.description'</span><span class=\"token punctuation\">,</span>\n        link<span class=\"token operator\">:</span> <span class=\"token string\">'https://ecomfe.github.io/san-cli/#/config'</span><span class=\"token punctuation\">,</span>\n        files<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            san<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                js<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'san.config.js'</span><span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        icon<span class=\"token operator\">:</span> iconUrl<span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">onRead</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            prompts<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token punctuation\">{</span>\n                    name<span class=\"token operator\">:</span> <span class=\"token string\">'publicPath'</span><span class=\"token punctuation\">,</span>\n                    type<span class=\"token operator\">:</span> <span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>\n                    value<span class=\"token operator\">:</span> data<span class=\"token punctuation\">.</span>san <span class=\"token operator\">&amp;&amp;</span> data<span class=\"token punctuation\">.</span>san<span class=\"token punctuation\">.</span>publicPath<span class=\"token punctuation\">,</span>\n                    message<span class=\"token operator\">:</span> <span class=\"token string\">'configuration.san-cli.publicPath.label'</span><span class=\"token punctuation\">,</span>\n                    description<span class=\"token operator\">:</span> <span class=\"token string\">'configuration.san-cli.publicPath.description'</span><span class=\"token punctuation\">,</span>\n                    group<span class=\"token operator\">:</span> <span class=\"token string\">'configuration.san-cli.groups.general'</span><span class=\"token punctuation\">,</span>\n                    link<span class=\"token operator\">:</span> <span class=\"token string\">'https://ecomfe.github.io/san-cli/#/config'</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token operator\">...</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">onWrite</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>api<span class=\"token punctuation\">,</span> prompts<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 在写入时显示</span>\n            <span class=\"token keyword\">const</span> sanData <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> prompt <span class=\"token keyword\">of</span> prompts<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                sanData<span class=\"token punctuation\">[</span>prompt<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> api<span class=\"token punctuation\">.</span><span class=\"token function\">getAnswer</span><span class=\"token punctuation\">(</span>prompt<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            api<span class=\"token punctuation\">.</span><span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token string\">'san'</span><span class=\"token punctuation\">,</span> sanData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre> <h4 id=\"%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><a class=\"header-anchor\" href=\"#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\">#</a> 配置文件</h4> <p>其中files中可以声明多个配置文件，例如 .eslintrc 和 san.config.js，支持的类型有：json、yaml、js、package。配置时需要严格按照次顺序，如果这项配置不存在，则会创建列表中的第一个文件。例如:</p> <pre class=\"language-js\"><code class=\"language-js\">    api<span class=\"token punctuation\">.</span><span class=\"token function\">registerConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        id<span class=\"token operator\">:</span> <span class=\"token string\">'san.eslintrc'</span><span class=\"token punctuation\">,</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'ESLint configuration'</span><span class=\"token punctuation\">,</span>\n        description<span class=\"token operator\">:</span> <span class=\"token string\">'configuration.eslint.description'</span><span class=\"token punctuation\">,</span>\n        link<span class=\"token operator\">:</span> <span class=\"token string\">'https://eslint.org'</span><span class=\"token punctuation\">,</span>\n        files<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            eslint<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                js<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'.eslintrc.js'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                json<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'.eslintrc'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.eslintrc.json'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                yaml<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'.eslintrc.yaml'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.eslintrc.yml'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                <span class=\"token comment\">// 会从 `package.json` 读取</span>\n                <span class=\"token keyword\">package</span><span class=\"token operator\">:</span> <span class=\"token string\">'eslintConfig'</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">)</span></code></pre> <p>配置文件的内容与读取数据的对应关系如下：</p> <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ui.js</span>\napi<span class=\"token punctuation\">.</span><span class=\"token function\">registerConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        id<span class=\"token operator\">:</span> <span class=\"token string\">'san.san-cli'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 配置项的id</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'San CLI'</span><span class=\"token punctuation\">,</span>\n        description<span class=\"token operator\">:</span> <span class=\"token string\">'configuration.san-cli.description'</span><span class=\"token punctuation\">,</span>\n        link<span class=\"token operator\">:</span> <span class=\"token string\">'https://ecomfe.github.io/san-cli/#/config'</span><span class=\"token punctuation\">,</span>\n        files<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            san<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                js<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'san.config.js'</span><span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// san.config.js</span>\n<span class=\"token punctuation\">{</span>\n    assetsDir<span class=\"token operator\">:</span> <span class=\"token constant\">STATIC_PRO</span><span class=\"token punctuation\">,</span>\n    publicPath<span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>\n    outputDir<span class=\"token operator\">:</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">,</span>\n    filenameHashing<span class=\"token operator\">:</span> isProduction<span class=\"token punctuation\">,</span>\n    css<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        sourceMap<span class=\"token operator\">:</span> isProduction<span class=\"token punctuation\">,</span>\n        cssPreprocessor<span class=\"token operator\">:</span> <span class=\"token string\">'less'</span><span class=\"token punctuation\">,</span>\n        extract<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n\n    pages<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        index<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            entry<span class=\"token operator\">:</span> <span class=\"token string\">'./pages/index.js'</span><span class=\"token punctuation\">,</span>\n            filename<span class=\"token operator\">:</span> <span class=\"token string\">'index.html'</span><span class=\"token punctuation\">,</span>\n            template<span class=\"token operator\">:</span> <span class=\"token string\">'./assets/index.html'</span><span class=\"token punctuation\">,</span>\n            title<span class=\"token operator\">:</span> <span class=\"token string\">'项目管理器 - san ui'</span><span class=\"token punctuation\">,</span>\n            chunks<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'index'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'vendors'</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 读取到cli ui后</span>\n<span class=\"token punctuation\">{</span>\n\tsan<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\tassetsDir<span class=\"token operator\">:</span> <span class=\"token constant\">STATIC_PRO</span><span class=\"token punctuation\">,</span>\n    \tpublicPath<span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>\n    \toutputDir<span class=\"token operator\">:</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">,</span>\n    \tfilenameHashing<span class=\"token operator\">:</span> isProduction<span class=\"token punctuation\">,</span>\n    \tcss<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        \tsourceMap<span class=\"token operator\">:</span> isProduction<span class=\"token punctuation\">,</span>\n        \tcssPreprocessor<span class=\"token operator\">:</span> <span class=\"token string\">'less'</span><span class=\"token punctuation\">,</span>\n        \textract<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    \t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    \tpages<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        \tindex<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            \tentry<span class=\"token operator\">:</span> <span class=\"token string\">'./pages/index.js'</span><span class=\"token punctuation\">,</span>\n            \tfilename<span class=\"token operator\">:</span> <span class=\"token string\">'index.html'</span><span class=\"token punctuation\">,</span>\n            \ttemplate<span class=\"token operator\">:</span> <span class=\"token string\">'./assets/index.html'</span><span class=\"token punctuation\">,</span>\n            \ttitle<span class=\"token operator\">:</span> <span class=\"token string\">'项目管理器 - san ui'</span><span class=\"token punctuation\">,</span>\n            \tchunks<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'index'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'vendors'</span><span class=\"token punctuation\">]</span>\n        \t<span class=\"token punctuation\">}</span>\n    \t<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">...</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre> <h4 id=\"api-%E8%AF%B4%E6%98%8E-3\"><a class=\"header-anchor\" href=\"#api-%E8%AF%B4%E6%98%8E-3\">#</a> API 说明</h4> <p><strong>registerConfig</strong></p> <table> <thead> <tr> <th>参数</th> <th>说明</th> <th>类型</th> <th>默认值</th> </tr> </thead> <tbody> <tr> <td>id</td> <td>必选，配置项的唯一id</td> <td>string</td> <td>无</td> </tr> <tr> <td>name</td> <td>必选，配置项的展示名称</td> <td>string</td> <td>无</td> </tr> <tr> <td>description</td> <td>必选，配置项的展示描述</td> <td>string</td> <td>无</td> </tr> <tr> <td>icon</td> <td>配置项的图标，取值可选santd内的icon类型或静态图片链接</td> <td>string</td> <td>无</td> </tr> <tr> <td>link</td> <td>配置项更多的链接</td> <td>string</td> <td>无</td> </tr> <tr> <td>files</td> <td>提供配置项需要检测的配置文件，支持的类型有：json、yaml、js、package</td> <td>object</td> <td>无</td> </tr> <tr> <td>onRead</td> <td>配置详情页面显示的表单对象，对于每个配置项都包含一个描述，整体格式符合inquirer.prompts对象</td> <td>onRead: ({data}) =&gt; ({prompts: [...]})</td> <td>无</td> </tr> <tr> <td>onWrite</td> <td>数据写入配置文件触发的钩子，可在此执行node.js的代码</td> <td>onWrite: ({ prompts, answers, data, files, cwd, api }) =&gt; {...})</td> <td>无</td> </tr> </tbody> </table> <p><strong>onRead</strong></p> <table> <thead> <tr> <th>参数</th> <th>说明</th> <th>类型</th> <th>默认值</th> </tr> </thead> <tbody> <tr> <td>id</td> <td>必选，配置项的唯一id</td> <td>string</td> <td>无</td> </tr> <tr> <td>name</td> <td>必选，配置项的展示名称</td> <td>string</td> <td>无</td> </tr> <tr> <td>description</td> <td>必选，配置项的展示描述</td> <td>string</td> <td>无</td> </tr> <tr> <td>icon</td> <td>配置项的图标，取值可选santd内的icon类型或静态图片链接</td> <td>string</td> <td>无</td> </tr> <tr> <td>link</td> <td>配置项更多的链接</td> <td>string</td> <td>无</td> </tr> <tr> <td>files</td> <td>提供配置项需要检测的配置文件，支持的类型有：json、yaml、js、package</td> <td>object</td> <td>无</td> </tr> <tr> <td>onRead</td> <td>配置详情页面显示的表单对象，对于每个配置项都包含一个描述，整体格式符合inquirer.prompts对象</td> <td>onRead: ({data}) =&gt; ({prompts: [...]})</td> <td>无</td> </tr> <tr> <td>onWrite</td> <td>数据写入配置文件触发的钩子，可在此执行node.js的代码</td> <td css-module=\".\">onWrite: ({ prompts, answers, data, files, cwd, api }) =&gt;</td> <td>无</td> </tr> </tbody> </table> <p>通过onRead函数返回的对象，符合<a href=\"\">inquirer.prompts</a>格式，支持配置单个表单或带多个选项卡的表单</p> <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 配置多个表单</span>\napi<span class=\"token punctuation\">.</span><span class=\"token function\">registerConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* ... */</span>\n  <span class=\"token function-variable function\">onRead</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> cwd <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    tabs<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        id<span class=\"token operator\">:</span> <span class=\"token string\">'tab1'</span><span class=\"token punctuation\">,</span>\n        label<span class=\"token operator\">:</span> <span class=\"token string\">'My tab'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// 可选的</span>\n        icon<span class=\"token operator\">:</span> <span class=\"token string\">'application_settings'</span><span class=\"token punctuation\">,</span>\n        prompts<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token comment\">// 表单对象</span>\n        <span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        id<span class=\"token operator\">:</span> <span class=\"token string\">'tab2'</span><span class=\"token punctuation\">,</span>\n        label<span class=\"token operator\">:</span> <span class=\"token string\">'My other tab'</span><span class=\"token punctuation\">,</span>\n        prompts<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token comment\">// 表单对象</span>\n        <span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre> <p><strong>onWrite</strong></p> <table> <thead> <tr> <th>参数</th> <th>说明</th> <th>类型</th> <th>默认值</th> </tr> </thead> <tbody> <tr> <td>prompts</td> <td>运行时表单对象</td> <td>string</td> <td>无</td> </tr> <tr> <td>answers</td> <td>用户输入的回答数据</td> <td>string</td> <td>无</td> </tr> <tr> <td>data</td> <td>从配置文件读取的只读的初始化数据</td> <td>string</td> <td>无</td> </tr> <tr> <td>files</td> <td>被找到的文件的描述器 ({ type: 'json', path: '...' })</td> <td>string</td> <td>无</td> </tr> <tr> <td>cwd</td> <td>当前工作目录</td> <td>string</td> <td>无</td> </tr> <tr> <td>api</td> <td>写入api辅助函数</td> <td>object</td> <td>无</td> </tr> </tbody> </table> <p><strong>onWrite.api</strong></p> <table> <thead> <tr> <th>参数</th> <th>说明</th> <th>类型</th> <th>默认值</th> </tr> </thead> <tbody> <tr> <td>assignData(fileId, newData)</td> <td>在写入前使用 Object.assign 来更新配置文件</td> <td>function</td> <td>无</td> </tr> <tr> <td>setData(fileId, newData)</td> <td>newData 的每个 key 在写入之前都将会被深设置在配置数据上 (或当值为 undefined 时被移除)。</td> <td>function</td> <td>无</td> </tr> <tr> <td>async getAnswer(id, mapper)</td> <td>为一个给定的表单 id 获取答案，并通过可能提供了的 mapper 函数 (例如 JSON.parse) 进行 map 处理。</td> <td>function</td> <td>无</td> </tr> </tbody> </table> <p>其中prompts对象格式：</p> <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> data<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n    type<span class=\"token operator\">:</span> data<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> data<span class=\"token punctuation\">.</span>short <span class=\"token operator\">||</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    message<span class=\"token operator\">:</span> data<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">,</span>\n    group<span class=\"token operator\">:</span> data<span class=\"token punctuation\">.</span>group <span class=\"token operator\">||</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    description<span class=\"token operator\">:</span> data<span class=\"token punctuation\">.</span>description <span class=\"token operator\">||</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    link<span class=\"token operator\">:</span> data<span class=\"token punctuation\">.</span>link <span class=\"token operator\">||</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    choices<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    visible<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    enabled<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 当前值 (未被过滤的)</span>\n    value<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 如果用户修改过了则为 true</span>\n    valueChanged<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    error<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    tabId<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 原始的 inquirer 提示符对象</span>\n    raw<span class=\"token operator\">:</span> data\n<span class=\"token punctuation\">}</span></code></pre> <h3 id=\"%E4%BB%BB%E5%8A%A1%E6%8F%92%E4%BB%B6\"><a class=\"header-anchor\" href=\"#%E4%BB%BB%E5%8A%A1%E6%8F%92%E4%BB%B6\">#</a> 任务插件</h3> <p>在项目任务中展示的任务项，生成自项目 package.json 文件的 scripts 字段。 cli ui默认为<code>san serve</code>、<code>san build</code>、<code>san inspect</code>三个命令实现了增强效果。对应于start、build、analyzer、build:modern、inspect三个任务。通过<code>api.registerTask</code> 方法，实现任务的“增强”，为任务增加额外的信息和显示，并能在对应的调用周期下实现附加功能。使用方式如下：</p> <pre class=\"language-js\"><code class=\"language-js\">    api<span class=\"token punctuation\">.</span><span class=\"token function\">registerTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 匹配san serve 或者 测试地址：san-cli/index.js serve</span>\n        match<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">san(-cli\\/index\\.js)? serve(\\s+--\\S+(\\s+\\S+)?)*$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        description<span class=\"token operator\">:</span> <span class=\"token string\">'task.description.serve'</span><span class=\"token punctuation\">,</span>\n        link<span class=\"token operator\">:</span> <span class=\"token string\">'https://ecomfe.github.io/san-cli'</span><span class=\"token punctuation\">,</span>\n        icon<span class=\"token operator\">:</span> sanIcon<span class=\"token punctuation\">,</span>\n        prompts<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span>\n                name<span class=\"token operator\">:</span> <span class=\"token string\">'open'</span><span class=\"token punctuation\">,</span>\n                type<span class=\"token operator\">:</span> <span class=\"token string\">'confirm'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n                message<span class=\"token operator\">:</span> <span class=\"token string\">'task.serve.open'</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token operator\">...</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">onBeforeRun</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>answers<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token operator\">...</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">onRun</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token operator\">...</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">onExit</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token operator\">...</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        views<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span>\n                id<span class=\"token operator\">:</span> <span class=\"token string\">'san.cli-ui.views.dashboard'</span><span class=\"token punctuation\">,</span>\n                label<span class=\"token operator\">:</span> <span class=\"token string\">'addons.dashboard.title'</span><span class=\"token punctuation\">,</span>\n                component<span class=\"token operator\">:</span> <span class=\"token string\">'san.cli-ui.components.dashboard'</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token operator\">...</span>\n\t\t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\tdefaultView<span class=\"token operator\">:</span> <span class=\"token string\">'san.cli-ui.views.dashboard'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre> <h4 id=\"api-%E8%AF%B4%E6%98%8E-4\"><a class=\"header-anchor\" href=\"#api-%E8%AF%B4%E6%98%8E-4\">#</a> API 说明</h4> <p><strong>registerTask</strong></p> <table> <thead> <tr> <th>参数</th> <th>说明</th> <th>类型</th> <th>默认值</th> </tr> </thead> <tbody> <tr> <td>match</td> <td>正则匹配对应的命令</td> <td>reg</td> <td>无</td> </tr> <tr> <td>description</td> <td>任务对应的描述</td> <td>string</td> <td>无</td> </tr> <tr> <td>icon</td> <td>任务的图标，取值可选santd内的icon类型或静态图片链接</td> <td>string</td> <td>无</td> </tr> <tr> <td>link</td> <td>任务说明的链接</td> <td>string</td> <td>无</td> </tr> <tr> <td>prompts</td> <td>返回任务可配置项的表单，整体格式符合inquirer.prompts对象</td> <td>object</td> <td>无</td> </tr> <tr> <td>onBeforeRun</td> <td>启动任务之前的钩子函数，可以修改任务参数</td> <td>onBeforeRun: async ({ answers, args }) =&gt; {})</td> <td>无</td> </tr> <tr> <td>onRun</td> <td>任务运行之后立即调用的钩子函数</td> <td>onRun: async ({ args, child, cwd }) =&gt; {}),child: Node 子进程,cwd: 进程所在目录</td> <td>无</td> </tr> <tr> <td>onExit</td> <td>任务退出后触发的钩子函数</td> <td>onExit: async ({ args, child, cwd, code, signal }) =&gt; {}) code：退出码</td> <td>无</td> </tr> <tr> <td>views</td> <td>额外的视图，默认情况下，这里是展示终端输出的 <code>dashboard</code> 视图</td> <td>array</td> <td>无</td> </tr> <tr> <td>defaultView</td> <td>展示任务详情时默认选择的视图 (默认是 <code>dashboard</code>)</td> <td>string</td> <td>无</td> </tr> </tbody> </table> <h3 id=\"%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A7%86%E5%9B%BE%E6%8F%92%E4%BB%B6\"><a class=\"header-anchor\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A7%86%E5%9B%BE%E6%8F%92%E4%BB%B6\">#</a> 自定义视图插件</h3> <p>开发者可以使用<code>api.registerView</code>创建自定义视图</p> <h3 id=\"%E8%B7%AF%E7%94%B1%E6%8F%92%E4%BB%B6\"><a class=\"header-anchor\" href=\"#%E8%B7%AF%E7%94%B1%E6%8F%92%E4%BB%B6\">#</a> 路由插件</h3> <p>开发者可以使用<code>api.registerRoute</code>创建自定义路由页面</p> <h2 id=\"2.-%E4%BA%8B%E4%BB%B6%E4%BA%A4%E4%BA%92\"><a class=\"header-anchor\" href=\"#2.-%E4%BA%8B%E4%BB%B6%E4%BA%A4%E4%BA%92\">#</a> 2. 事件交互</h2> <h3 id=\"prompts%E8%A1%A8%E5%8D%95%E5%AF%B9%E8%B1%A1\"><a class=\"header-anchor\" href=\"#prompts%E8%A1%A8%E5%8D%95%E5%AF%B9%E8%B1%A1\">#</a> prompts表单对象</h3> <p>prompts对象必须是合法的 <a href=\"https://github.com/SBoudrias/Inquirer.js\">inquirer</a> 对象。基本的结构如下：</p> <pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token punctuation\">{</span>\n            id<span class=\"token operator\">:</span> data<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n            type<span class=\"token operator\">:</span> data<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">,</span>\n            visible<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            enabled<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            name<span class=\"token operator\">:</span> data<span class=\"token punctuation\">.</span>name <span class=\"token operator\">||</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n            message<span class=\"token operator\">:</span> data<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">,</span>\n            placeholder<span class=\"token operator\">:</span> data<span class=\"token punctuation\">.</span>placeholder <span class=\"token operator\">||</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n            group<span class=\"token operator\">:</span> data<span class=\"token punctuation\">.</span>group <span class=\"token operator\">||</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n            description<span class=\"token operator\">:</span> data<span class=\"token punctuation\">.</span>description <span class=\"token operator\">||</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n            link<span class=\"token operator\">:</span> data<span class=\"token punctuation\">.</span>link <span class=\"token operator\">||</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n            choices<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n            value<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n            valueChanged<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            error<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n            tabId<span class=\"token operator\">:</span> data<span class=\"token punctuation\">.</span>tabId <span class=\"token operator\">||</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n            formItemLayout<span class=\"token operator\">:</span> data<span class=\"token punctuation\">.</span>formItemLayout <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            raw<span class=\"token operator\">:</span> data\n        <span class=\"token punctuation\">}</span></code></pre> <p>支持的 inquirer 类型有：checkbox、confirm、input、list、string。</p> <h3 id=\"%E6%8F%92%E4%BB%B6action\"><a class=\"header-anchor\" href=\"#%E6%8F%92%E4%BB%B6action\">#</a> 插件action</h3> <p>插件的action是cli ui的插件在浏览器端和Node.js之间的事件调用监听机制，例如终止端口插件的终止按钮，在按下后，会利用此api向node端传递需要杀死的端口，进而调用kill函数完成功能。</p> <pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token comment\">// 调用一个 action</span>\n    api<span class=\"token punctuation\">.</span><span class=\"token function\">callAction</span><span class=\"token punctuation\">(</span><span class=\"token string\">'san.widgets.actions.kill-port'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        port<span class=\"token operator\">:</span> <span class=\"token number\">8080</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">results</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">errors</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  \t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>errors<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 监听一个 action</span>\n    api<span class=\"token punctuation\">.</span><span class=\"token function\">onAction</span><span class=\"token punctuation\">(</span><span class=\"token string\">'san.widgets.actions.kill-port'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token parameter\">params</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            status<span class=\"token operator\">:</span> res\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre> <p>在浏览器端的组件内，可通过调用san.component扩展的<code>$onPluginActionCalled</code>、<code>$onPluginActionResolved</code>和<code>$callPluginAction</code>方法实现在action调用后、action返回后、action调用时，三个时期内需触发的功能</p> <h3 id=\"%E6%8F%92%E4%BB%B6%E4%BA%8B%E4%BB%B6%E9%92%A9%E5%AD%90\"><a class=\"header-anchor\" href=\"#%E6%8F%92%E4%BB%B6%E4%BA%8B%E4%BB%B6%E9%92%A9%E5%AD%90\">#</a> 插件事件钩子</h3> <p><code>onProjectOpen</code> 当插件在当前项目中第一次被加载时触发。 <code>onPluginReload</code> 当插件被重新加载时触发。</p> <h3 id=\"%E8%BF%9B%E7%A8%8B%E9%80%9A%E8%AE%AFipc\"><a class=\"header-anchor\" href=\"#%E8%BF%9B%E7%A8%8B%E9%80%9A%E8%AE%AFipc\">#</a> 进程通讯ipc</h3> <p>IPC 就是进程间通信 (Inter-Process Communication) 的缩写。该系统允许你轻松的从子进程 (例如任务) 发送消息，并且轻量快速。在cli ui中使用<code>api.getIpc()</code>获取ipc的实例，进而实现进程的通讯。例如</p> <pre class=\"language-js\"><code class=\"language-js\">   ipc<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>sanCliServe<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sharedData<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'serve-url'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>sanCliServe<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ipc<span class=\"token punctuation\">.</span><span class=\"token function\">off</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ipc<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre> <h3 id=\"%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB\"><a class=\"header-anchor\" href=\"#%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB\">#</a> 数据共享</h3> <p>cli ui为开发者提供一种简易的自定义组件之间通过共享的数据互通信息的方式。为保证唯一使用，需要在使用数据函数时，输入唯一id生成自己的命名空间</p> <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 带命名空间的版本</span>\n<span class=\"token keyword\">const</span> sharedData <span class=\"token operator\">=</span> api<span class=\"token punctuation\">.</span><span class=\"token function\">getSharedData</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my.com.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 获取sharedData中$id的数据</span>\nsharedData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>$id<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 设置sharedData中$id的数据</span>\nsharedData<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>$id<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>disk<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 清除sharedData中的$id的数据</span>\nsharedData<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>$id<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 监听sharedData的$id的值变化</span>\nsharedData<span class=\"token punctuation\">.</span><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>$id<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 清除sharedData的$id的监听</span>\nsharedData<span class=\"token punctuation\">.</span><span class=\"token function\">unwatch</span><span class=\"token punctuation\">(</span>$id<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span></code></pre> <h2 id=\"3.%E6%8C%81%E4%B9%85%E5%AD%98%E5%82%A8db\"><a class=\"header-anchor\" href=\"#3.%E6%8C%81%E4%B9%85%E5%AD%98%E5%82%A8db\">#</a> 3.持久存储db</h2> <p><code>api.getDB(namespace)</code> 获取lowdb的实例对象</p> <h2 id=\"4.%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0\"><a class=\"header-anchor\" href=\"#4.%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0\">#</a> 4.工具函数</h2> <p><code>api.hasPlugin</code> 如果项目使用了该插件则返回 true <code>api.getCwd</code>获取当前工作目录。 <code>api.resolve</code> 在当前工程下解析一个文件： <code>api.getProject</code> 得到当前打开的工程。</p> <h1 id=\"clientaddon%E5%AF%B9%E8%B1%A1\"><a class=\"header-anchor\" href=\"#clientaddon%E5%AF%B9%E8%B1%A1\">#</a> ClientAddon对象</h1> <p><code>defineComponent</code>定义组件对象<code>addLocales</code>扩展语言包</p> </div></div> ";
// Exports
module.exports = code;

/***/ }),

/***/ 48:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return ContentView; });
/* harmony import */ var san_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);

class ContentView extends san_component__WEBPACK_IMPORTED_MODULE_0__[/* SanComponent */ "a"] {
  inited() {
    global.hub.fire('changed', {
      "level": 0,
      "children": [{
        "level": 2,
        "title": "1. 插件定义类",
        "hash": "1.-%E6%8F%92%E4%BB%B6%E5%AE%9A%E4%B9%89%E7%B1%BB",
        "children": [{
          "level": 3,
          "title": "addon插件",
          "hash": "addon%E6%8F%92%E4%BB%B6"
        }, {
          "level": 3,
          "title": "widget插件",
          "hash": "widget%E6%8F%92%E4%BB%B6"
        }, {
          "level": 3,
          "title": "配置插件",
          "hash": "%E9%85%8D%E7%BD%AE%E6%8F%92%E4%BB%B6"
        }, {
          "level": 3,
          "title": "任务插件",
          "hash": "%E4%BB%BB%E5%8A%A1%E6%8F%92%E4%BB%B6"
        }, {
          "level": 3,
          "title": "自定义视图插件",
          "hash": "%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A7%86%E5%9B%BE%E6%8F%92%E4%BB%B6"
        }, {
          "level": 3,
          "title": "路由插件",
          "hash": "%E8%B7%AF%E7%94%B1%E6%8F%92%E4%BB%B6"
        }]
      }, {
        "level": 2,
        "title": "2. 事件交互",
        "hash": "2.-%E4%BA%8B%E4%BB%B6%E4%BA%A4%E4%BA%92",
        "children": [{
          "level": 3,
          "title": "prompts表单对象",
          "hash": "prompts%E8%A1%A8%E5%8D%95%E5%AF%B9%E8%B1%A1"
        }, {
          "level": 3,
          "title": "插件action",
          "hash": "%E6%8F%92%E4%BB%B6action"
        }, {
          "level": 3,
          "title": "插件事件钩子",
          "hash": "%E6%8F%92%E4%BB%B6%E4%BA%8B%E4%BB%B6%E9%92%A9%E5%AD%90"
        }, {
          "level": 3,
          "title": "进程通讯ipc",
          "hash": "%E8%BF%9B%E7%A8%8B%E9%80%9A%E8%AE%AFipc"
        }, {
          "level": 3,
          "title": "数据共享",
          "hash": "%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB"
        }]
      }, {
        "level": 2,
        "title": "3.持久存储db",
        "hash": "3.%E6%8C%81%E4%B9%85%E5%AD%98%E5%82%A8db"
      }, {
        "level": 2,
        "title": "4.工具函数",
        "hash": "4.%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0"
      }]
    });
  }

}
/* san-hmr disable */
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1)))

/***/ }),

/***/ 89:
/***/ (function(module, exports, __webpack_require__) {


        var normalize = __webpack_require__(2);
        var injectStyles = [];

        var template = __webpack_require__(156);
        
        var script = __webpack_require__(48).default;
        module.exports = __webpack_require__(48);
    
        module.exports.default = normalize(script, template, injectStyles);
        /* san-hmr component */
    

/***/ })

}]);